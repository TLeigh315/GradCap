#include <RGBmatrixPanel.h>

#define CLK  8   // USE THIS ON ARDUINO UNO, ADAFRUIT METRO M0, etc.
#define OE   9
#define LAT 10
#define A   A0
#define B   A1
#define C   A2
#define D   A3

RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);
#define F2(progmem_ptr) (const __FlashStringHelper *)progmem_ptr

// We're making these globals to save stack space.
int row;                        ///< Row count, when looping.
int col;                        ///< Column count, when looping.
unsigned char red;              ///< Red color value, pulled from the palette.
unsigned char green;            ///< Green color value, pulled from the palette.
unsigned char blue;             ///< Blue color value, pulled from the palette.
unsigned char paletteIndex;     ///< Index into the color palette.
unsigned long pixelPosition;    ///< Index into the pixel array.
uint16_t mixedColor;            ///< 24-bit RGB color, converted to an RGB Matrix color.
unsigned int cycle;             ///< Animation cycle counter.

static const uint32_t PALETTE[] PROGMEM = {0xC2EEEB, 0xd38437, 0x0507A6, 0x880000, 0x130901, 0xFFFF00, 0xE8D8D8, 0xFF8F00, 0x8800, 0x24102, 0x8A00FF, 0x000000, 0x000000, 0x000000, 0x000000};

static const int8_t SPIDERMAN_32_32_FRAME_1[] PROGMEM = {0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x71, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x44, 0x74, 0x41, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x44, 0x74, 0x44, 0x10, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x44, 0x74, 0x44, 0x41, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x34, 0x44, 0x11, 0x71, 0x14, 0x44, 0x31, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x33, 0x41, 0x37, 0x73, 0x31, 0x43, 0x33, 0x10,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, 0x33, 0x11, 0x17, 0x77, 0x11, 0x13, 0x33, 0x31,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, 0x31, 0x44, 0x41, 0x71, 0x44, 0x41, 0x33, 0x31,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x14, 0x44, 0x41, 0x41, 0x44, 0x44, 0x11, 0x10,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x43, 0x14, 0x44, 0x13, 0x44, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x44, 0x31, 0x44, 0x44, 0x41, 0x34, 0x41, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x44, 0x13, 0x44, 0x44, 0x43, 0x14, 0x41, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x44, 0x44, 0x44, 0x44, 0x44, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x14, 0x41, 0x11, 0x44, 0x11, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x14, 0x44, 0x11, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x44, 0x44, 0x44, 0x10, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x44, 0x44, 0x44, 0x44, 0x41, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x41, 0x14, 0x44, 0x11, 0x44, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x17, 0x71, 0x41, 0x77, 0x14, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x17, 0x14, 0x44, 0x17, 0x14, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x11, 0x44, 0x44, 0x41, 0x14, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x14, 0x44, 0x44, 0x44, 0x14, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x44, 0x44, 0x44, 0x44, 0x44, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x44, 0x44, 0x44, 0x44, 0x44, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x44, 0x44, 0x44, 0x44, 0x41, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x44, 0x44, 0x41, 0x10, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x10, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const int8_t HULK_32_32_FRAME_1[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x11, 0x11, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x11, 0x55, 0x55, 0x55, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x15, 0x55, 0x55, 0x55, 0x51, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x15, 0x55, 0x99, 0xAA, 0xA9, 0xAA, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x15, 0x99, 0x9A, 0x71, 0x1A, 0x17, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x15, 0x99, 0x99, 0x71, 0x19, 0x17, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x19, 0x99, 0x97, 0x79, 0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0x19, 0x91, 0x99, 0x11, 0x11, 0x91, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x19, 0x99, 0x99, 0x19, 0x99, 0x99, 0x19, 0x99, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x19, 0x99, 0x99, 0xAA, 0x91, 0x11, 0x11, 0x9A, 0xA9, 0x99, 0x10, 0x00, 0x00, 0x00, 0x00,
0x01, 0x99, 0x99, 0x99, 0x99, 0xAA, 0x99, 0x9A, 0xA9, 0x99, 0x99, 0x91, 0x00, 0x00, 0x00, 0x00,
0x01, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x91, 0x00, 0x00, 0x00, 0x00,
0x19, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9A, 0x99, 0x99, 0x99, 0x99, 0x99, 0x10, 0x00, 0x00, 0x00,
0x19, 0x99, 0x99, 0x19, 0x99, 0x99, 0x9A, 0x99, 0x99, 0x19, 0x99, 0x99, 0x10, 0x00, 0x00, 0x00,
0x19, 0x99, 0x11, 0x11, 0xAA, 0xAA, 0xA9, 0xAA, 0xA1, 0x11, 0x19, 0x99, 0x10, 0x00, 0x00, 0x00,
0x19, 0x99, 0x99, 0x11, 0x99, 0x99, 0x9A, 0x99, 0x91, 0x19, 0x99, 0x99, 0x10, 0x00, 0x00, 0x00,
0x19, 0x99, 0x99, 0x11, 0x99, 0x99, 0xAA, 0xA9, 0x91, 0x19, 0x99, 0x99, 0x10, 0x00, 0x00, 0x00,
0x19, 0x99, 0x99, 0x11, 0x99, 0x99, 0x9A, 0x99, 0x91, 0x19, 0x99, 0x99, 0x10, 0x00, 0x00, 0x00,
0x01, 0x11, 0x11, 0x01, 0xBB, 0xBB, 0xBB, 0xBB, 0xB1, 0x01, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x1B, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x01, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x1B, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0xBB, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x1B, 0x9B, 0x9B, 0x9B, 0x1B, 0xB9, 0xBB, 0x9B, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x11, 0x99, 0x99, 0x99, 0x91, 0x01, 0x99, 0x99, 0x99, 0x91, 0x10, 0x00, 0x00, 0x00, 0x00,
0x01, 0x99, 0x99, 0x99, 0x99, 0x10, 0x00, 0x19, 0x99, 0x99, 0x99, 0x91, 0x00, 0x00, 0x00, 0x00};

static const int8_t IRONMAN_32_32_FRAME_1[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x44, 0x44, 0x44, 0x10, 0x00, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x44, 0x44, 0x44, 0x41, 0x00, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x64, 0x44, 0x66, 0x44, 0x44, 0x10, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x64, 0x44, 0x66, 0x64, 0x44, 0x10, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x66, 0x66, 0x66, 0x64, 0x44, 0x10, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x76, 0x66, 0x77, 0x64, 0x44, 0x10, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x77, 0x67, 0x76, 0x64, 0x41, 0x00, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x66, 0x66, 0x66, 0x44, 0x41, 0x10, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x16, 0x11, 0x16, 0x44, 0x16, 0x41, 0x10, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x44, 0x11, 0x66, 0x66, 0x41, 0x64, 0x14, 0x41, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x46, 0x61, 0x11, 0x11, 0x11, 0x41, 0x66, 0x41, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x64, 0x41, 0x64, 0x77, 0x44, 0x61, 0x44, 0x66, 0x10,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x61, 0x11, 0x14, 0x77, 0x44, 0x11, 0x11, 0x64, 0x10,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x44, 0x11, 0x61, 0x11, 0x11, 0x61, 0x14, 0x40, 0x10,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x44, 0x11, 0x14, 0x44, 0x44, 0x11, 0x14, 0x44, 0x10,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x01, 0x41, 0x11, 0x11, 0x41, 0x01, 0x11, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x44, 0x16, 0x14, 0x44, 0x10, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x46, 0x61, 0x66, 0x41, 0x41, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x44, 0x16, 0x10, 0x16, 0x14, 0x44, 0x10, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x41, 0x44, 0x11, 0x00, 0x01, 0x14, 0x41, 0x41, 0x10,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x44, 0x44, 0x11, 0x41, 0x00, 0x01, 0x41, 0x14, 0x44, 0x41,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x11, 0x11, 0x11, 0x00, 0x01, 0x11, 0x11, 0x11, 0x11,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const int8_t CAPAMERICA_32_32_FRAME_1[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x00, 0x01, 0x33, 0x33, 0x37, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x00, 0x13, 0x33, 0x33, 0x73, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x00, 0x13, 0x33, 0x33, 0x77, 0x73, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x01, 0x23, 0x33, 0x33, 0x73, 0x73, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x01, 0x23, 0x31, 0x11, 0x33, 0x31, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x01, 0x23, 0x37, 0x71, 0x13, 0x17, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x00, 0x13, 0x33, 0x71, 0x13, 0x17, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x01, 0x13, 0x32, 0x22, 0x22, 0x22, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x01, 0x13, 0x31, 0x32, 0x21, 0x11, 0x21, 0x11, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x13, 0x33, 0x35, 0x12, 0x22, 0x22, 0x13, 0x33, 0x11, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x13, 0x33, 0x35, 0x31, 0x11, 0x11, 0x33, 0x33, 0x11, 0x43, 0x10, 0x00, 0x00, 0x00, 0x00,
                                                    0x01, 0x33, 0x33, 0x15, 0x33, 0x33, 0x35, 0x13, 0x33, 0x31, 0x43, 0x10, 0x00, 0x00, 0x00, 0x00,
                                                    0x01, 0x53, 0x11, 0x15, 0x33, 0x00, 0x35, 0x11, 0x13, 0x51, 0x47, 0x10, 0x00, 0x00, 0x00, 0x00,
                                                    0x01, 0x25, 0x51, 0x15, 0x33, 0x33, 0x35, 0x11, 0x55, 0x21, 0x47, 0x10, 0x00, 0x00, 0x00, 0x00,
                                                    0x01, 0x25, 0x51, 0x17, 0x47, 0x47, 0x47, 0x11, 0x55, 0x21, 0x43, 0x10, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x11, 0x10, 0x17, 0x47, 0x47, 0x47, 0x10, 0x11, 0x11, 0x43, 0x10, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x01, 0x33, 0x33, 0x33, 0x33, 0x31, 0x00, 0x01, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x13, 0x33, 0x33, 0x13, 0x33, 0x33, 0x10, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x01, 0x11, 0x33, 0x31, 0x01, 0x33, 0x31, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x01, 0x15, 0x55, 0x11, 0x10, 0x00, 0x11, 0x15, 0x55, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x15, 0x55, 0x55, 0x55, 0x10, 0x00, 0x15, 0x55, 0x55, 0x55, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x11, 0x11, 0x11, 0x11, 0x10, 0x00, 0x11, 0x11, 0x11, 0x11, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};


static const int8_t IRONMASK_32_32_FRAME_1[] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x64, 0x44, 0x44, 0x66, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x06, 0x66, 0x66, 0x44, 0x46, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x44, 0x46, 0x66, 0x66, 0x60, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x44, 0x46, 0x66, 0x66, 0x60, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x46, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x44, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x46, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x44, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x44, 0x00, 0x00, 0x66, 0x60, 0x00, 0x04, 0x44, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x43, 0x77, 0x70, 0x66, 0x60, 0x77, 0x73, 0x44, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x43, 0x77, 0x77, 0x66, 0x67, 0x77, 0x73, 0x44, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x63, 0x33, 0x77, 0x36, 0x37, 0x73, 0x33, 0x64, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x66, 0x63, 0x33, 0x36, 0x33, 0x33, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x06, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x46, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x44, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x46, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x44, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x44, 0x66, 0x66, 0x66, 0x66, 0x66, 0x64, 0x44, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x44, 0x66, 0x66, 0x66, 0x66, 0x66, 0x64, 0x44, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x04, 0x44, 0x16, 0x61, 0x11, 0x11, 0x66, 0x14, 0x44, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x44, 0x51, 0x15, 0x55, 0x55, 0x11, 0x54, 0x40, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x06, 0x55, 0x55, 0x66, 0x65, 0x55, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x44, 0x44, 0x44, 0x46, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
                                                    
const char message[] PROGMEM = "Thanks Mom & Dad!";
const char AGGIES[] PROGMEM = "AGGIES";
const char WHOOP[] PROGMEM = "WHOOP!!!";

const char message1[] PROGMEM  = "WE";
const char message2[] PROGMEM  = "MADE";
const char message3[] PROGMEM  = "IT!";

const char Tletter[] PROGMEM  = "T";
const char Aletter[] PROGMEM  = "A";
const char Mletter[] PROGMEM  = "M";

int16_t hue = 0;
int16_t textX = matrix.width();
int16_t textX1 = matrix.width();
int16_t textX2 = matrix.width();
int16_t textX3 = matrix.width();
int16_t textMin = sizeof(message) *-16;

int8_t ball[3][4] = {
  {  3,  0,  1,  1 }, // Initial X,Y pos & velocity for 3 bouncy balls
  { 17, 15,  1, -1 },
  { 27,  4, -1,  1 }
};
static const uint16_t PROGMEM ballcolor[3] = {
  0x0080, // Green=1
  0x0002, // Blue=1
  0x1000  // Red=1
};

void setup() {
  matrix.begin();
}

void loop() { 
  Intro();
  delay(5000);
  InfHorizontal(message,2,7,5555,10); //Thank you message, Size 2 Font, 7 dots down, Rainbow 
  moveMsPacMan();
  RunMsPacMan(); 
  draw32x32ByNibble(IRONMASK_32_32_FRAME_1, PALETTE); 
  delay(1000);
  Superheroes(3);  
  delay(1000);
  EnterHorizontal(message1, message2, message3);
 
}

void InfHorizontal(const char* message, int textsize, int textY, int color, int textSpeed){
  while(true){
    matrix.fillScreen(0);

    // draw some text!
    matrix.setCursor(textX, textY);    // start at top left, with one pixel of spacing
    matrix.setTextSize(textsize);     // size 1 == 8 pixels high
    matrix.setTextWrap(false); // Don't wrap at end of line - will do ourselves

    if (color == 5555) matrix.setTextColor(matrix.ColorHSV(hue, 255, 255, false));
    else matrix.setTextColor(color);
    matrix.println(F2(message));

    if (textX < textMin) {
      hue=0;
      textX = matrix.width();
      break;
    }
    else --textX;

    hue += 7;
    if(hue >= 1536) hue -= 1536;

    #if !defined(__AVR__)
      // On non-AVR boards, delay slightly so screen updates aren't too quick.
      delay(20);
    #endif

    // Update display
    matrix.swapBuffers(false);
  }
}

void Intro (){
  matrix.fillScreen(matrix.ColorHSV(1375, 255, 100, true));
  matrix.setTextColor(matrix.Color333(7, 7, 7));
  matrix.setTextSize(2);
  matrix.setCursor(11, 7); 
  matrix.println(F2(Tletter));
  
  matrix.setTextSize(1);   
  matrix.setCursor(6, 14);
  matrix.println(F2(Aletter));
  matrix.setCursor(22, 14);
  matrix.println(F2(Mletter));
}

void MsPacMan(){
  // fill a Yellow circle
  matrix.fillCircle(16, 16, 7, matrix.Color333(7, 7, 0));
  matrix.fillRect(7, 11, 4, 4, matrix.Color333(7, 0, 0));
  matrix.fillRect(11, 7, 4, 4, matrix.Color333(7, 0, 0));

  // draw an 'X' in black
  matrix.drawLine(16, 16, 31, 12, matrix.Color333(0, 0, 0));
  matrix.drawLine(16, 16, 31, 20, matrix.Color333(0, 0, 0));
  matrix.drawLine(18, 16, 21, 16, matrix.Color333(0, 0, 0));
  matrix.drawLine(22, 15, 22, 17, matrix.Color333(0, 0, 0));
  matrix.fillRect(23, 15, 24, 17, matrix.Color333(0, 0, 0));

  delay(500);
}

void moveMsPacMan(){
  int x=5;
  int y = 4;
  while (true){
   
    if (x >= 16){
      matrix.fillScreen(0);
      // fill a Yellow circle
      matrix.fillCircle(x, 16, 7, matrix.Color333(7, 7, 0));
      matrix.fillRect(x-9, 11, 4, 4, matrix.Color333(7, 0, 0));
      matrix.fillRect(x-5, 7, 4, 4, matrix.Color333(7, 0, 0));
      
      if( x > matrix.width() + 9)
        break;
    }
    else {
      matrix.fillScreen(0);
      matrix.fillCircle(matrix.width()-x,16, 4, matrix.Color333(7,7,7)); //The ball she eats
      // fill a Yellow circle
      matrix.fillCircle(x, 16, 7, matrix.Color333(7, 7, 0));
      matrix.fillRect(x-9, 11, 4, 4, matrix.Color333(7, 0, 0));
      matrix.fillRect(x-5, 7, 4, 4, matrix.Color333(7, 0, 0));
      // draw an 'X' in black
      //matrix.drawLine(x, 16, x+5, 16+y, matrix.Color333(0, 0, 0));
      //matrix.drawLine(x, 16, x+5, 16-y, matrix.Color333(0, 0, 0));

      //matrix.drawLine(x+1, 16, x+7, 16, matrix.Color333(0, 0, 0));
      //matrix.drawLine(x+4, 15-y, x+4, 17-y, matrix.Color333(0, 0, 0));
      //matrix.fillRect(x+5, 15-y, x+6, 17-y, matrix.Color333(0, 0, 0));

    }

    delay(100);
    x += 2;
    
    if (y < -4){
      y +=2; 
    }
    else y -= 2;
  }

}

void EnterHorizontal(const char* message1, const char* message2, const char* message3){
  while(true){
    if (textX1 < 10) {
      if(textX2 < 5){
        if(textX3< 8){
          delay(10);
          --textX1;
          --textX2;
          --textX3;

          matrix.fillScreen(0);
          matrix.setTextColor(matrix.ColorHSV(hue, 255, 255, false));
          matrix.setCursor(textX1, 1);
          matrix.println(F2(message1));
          matrix.setCursor(textX2, 9);
          matrix.println(F2(message2));
          matrix.setCursor(textX3, 17);
          matrix.println(F2(message3));

          if (textX1 == textMin){
          
            textX1 = matrix.width();
            textX2 = matrix.width();
            textX3 = matrix.width();
          break;
          }
          
        }

        else{
          matrix.fillScreen(0);
          matrix.setCursor(textX1, 1);    
          matrix.setTextSize(1);     // size 1 == 8 pixels high
          matrix.setTextWrap(false); // Don't wrap at end of line - will do ourselves
          matrix.setTextColor(matrix.ColorHSV(hue, 255, 255, false));
          matrix.println(F2(message1));
        
          matrix.setCursor(textX2, 9);    
          matrix.setTextSize(1);     // size 1 == 8 pixels high
          matrix.setTextWrap(false); // Don't wrap at end of line - will do ourselves
          matrix.setTextColor(matrix.ColorHSV(hue, 255, 255, false));
          matrix.println(F2(message2));

          matrix.setCursor(textX3, 17);    
          matrix.setTextSize(1);     // size 1 == 8 pixels high
          matrix.setTextWrap(false); // Don't wrap at end of line - will do ourselves
          matrix.setTextColor(matrix.ColorHSV(hue, 255, 255, false));
          matrix.println(F2(message3));
          --textX3;
          
          if(textX3 < 8) delay(2000);
        }
      }

      else{
        matrix.fillScreen(0);
        matrix.setCursor(textX1, 0);    
        matrix.setTextSize(1);     // size 1 == 8 pixels high
        matrix.setTextWrap(false); // Don't wrap at end of line - will do ourselves
        matrix.setTextColor(matrix.ColorHSV(hue, 255, 255, false));
        matrix.println(F2(message1));
        
        matrix.setCursor(textX2, 8);    
        matrix.setTextSize(1);     // size 1 == 8 pixels high
        matrix.setTextWrap(false); // Don't wrap at end of line - will do ourselves
        matrix.setTextColor(matrix.ColorHSV(hue, 255, 255, false));
        matrix.println(F2(message2));
        --textX2;
      }

    }
    else {
      matrix.fillScreen(0);
      matrix.setCursor(textX1, 0);    
      matrix.setTextSize(1);     // size 1 == 8 pixels high
      matrix.setTextWrap(false); // Don't wrap at end of line - will do ourselves
      matrix.setTextColor(matrix.ColorHSV(hue, 255, 255, false));
      matrix.println(F2(message1));
      --textX1;
    }

    hue += 7;
    if(hue >= 1536) hue -= 1536;

    delay(10);
  
    #if !defined(__AVR__)
      // On non-AVR boards, delay slightly so screen updates aren't too quick.
      delay(200);
    #endif

    // Update display
    matrix.swapBuffers(true);
  }
}

void draw32x32ByNibble(const unsigned char *pixels, const void *palette)
{
    pixelPosition = 0;
    for (row = 0; row < 32; row++)
    {
        for (col = 0; col < 32; col++)
        {
            red = green = blue = 0; // Assume transparent is black.
            paletteIndex = pgm_read_byte(pixels + pixelPosition); // Find the byte containing the two pixels.
            if (0 == col % 2)
                paletteIndex = paletteIndex >> 4;
            else
                paletteIndex = paletteIndex & 0x0F;
            if (paletteIndex > 0 && paletteIndex < 16)
            {
                red = pgm_read_byte(palette + 4 * (paletteIndex - 1) + 2);
                green = pgm_read_byte(palette + 4 * (paletteIndex - 1) + 1);
                blue = pgm_read_byte(palette + 4 * (paletteIndex - 1) + 0);
            }
            mixedColor = matrix.Color888(red, green, blue);
            matrix.drawPixel(col, row, mixedColor); 
            if (col % 2 == 1)
                pixelPosition++;
        }
    }
}


void Superheroes(unsigned int cycles)
{
    matrix.fillScreen(matrix.Color333(0, 0, 0));
    for (cycle = 0; cycle < cycles; cycle++)
    {
        draw32x32ByNibble(IRONMAN_32_32_FRAME_1, PALETTE); 
        delay(1000);
        draw32x32ByNibble(CAPAMERICA_32_32_FRAME_1, PALETTE); 
        delay(1000);
        draw32x32ByNibble(HULK_32_32_FRAME_1, PALETTE); 
        delay(1000);
        draw32x32ByNibble(SPIDERMAN_32_32_FRAME_1, PALETTE); 
        delay(1000);
        
    }
}

void RunMsPacMan(){
    int x=matrix.width()+7;
    
  while (true){
    int x1= x+18;
    int x2= x1+18;
    int x3= x2+18;
    int x4= x3+18;
    
    if (x4 <= -7){
      matrix.fillScreen(0);
      // fill a Yellow circle
      matrix.fillCircle(x, 16, 7, matrix.Color333(7, 7, 0));
      matrix.fillRect(x-9, 11, 4, 4, matrix.Color333(7, 0, 0));
      matrix.fillRect(x-5, 7, 4, 4, matrix.Color333(7, 0, 0));
      
      if( x > matrix.width() + 9)
        int x=matrix.width()+7;
        break;
    }
    else {
      matrix.fillScreen(0);
      // fill a Yellow circle
      matrix.fillCircle(x, 16, 7, matrix.Color333(7, 7, 0));
      matrix.fillRect(x+6, 11, 4, 4, matrix.Color333(7, 0, 0));
      matrix.fillRect(x+2, 7, 4, 4, matrix.Color333(7, 0, 0));
      //BLUE monster
      matrix.fillCircle(x1, 12, 7, matrix.Color888(0, 240, 255));
      matrix.fillRect(x1-7, 15, 3, 9, matrix.Color888(0, 240, 255));
      matrix.fillRect(x1-3, 15, 3, 9, matrix.Color888(0, 240, 255));
      matrix.fillRect(x1+1, 15, 3, 9, matrix.Color888(0, 240, 255));
      matrix.fillRect(x1+5, 15, 3, 9, matrix.Color888(0, 240, 255));

      //RED monster
      matrix.fillCircle(x2, 12, 7, matrix.Color888(255, 0, 0));
      matrix.fillRect(x2-7, 15, 3, 9, matrix.Color888(255, 0, 0));
      matrix.fillRect(x2-3, 15, 3, 9, matrix.Color888(255, 0, 0));
      matrix.fillRect(x2+1, 15, 3, 9, matrix.Color888(255, 0, 0));
      matrix.fillRect(x2+5, 15, 3, 9, matrix.Color888(255, 0, 0));

      //ORANGE monster
      matrix.fillCircle(x3, 12, 7, matrix.Color888(255, 147, 0));
      matrix.fillRect(x3-7, 15, 3, 9, matrix.Color888(255, 147, 0));
      matrix.fillRect(x3-3, 15, 3, 9, matrix.Color888(255, 147, 0));
      matrix.fillRect(x3+1, 15, 3, 9, matrix.Color888(255, 147, 0));
      matrix.fillRect(x3+5, 15, 3, 9, matrix.Color888(255, 147, 0));
      
      //PINK monster
      matrix.fillCircle(x4, 12, 7, matrix.Color888(240, 173, 244));
      matrix.fillRect(x4-7, 15, 3, 9, matrix.Color888(240, 173, 244));
      matrix.fillRect(x4-3, 15, 3, 9, matrix.Color888(240, 173, 244));
      matrix.fillRect(x4+1, 15, 3, 9, matrix.Color888(240, 173, 244));
      matrix.fillRect(x4+5, 15, 3, 9, matrix.Color888(240, 173, 244));
      
    }

    delay(100);
    x -= 3;
  }
}

